knitr::opts_chunk$set(echo = TRUE, collapse = TRUE)
library(kableExtra)
con <- url("http://www.delfi.lt")
delfi_html <- readLines(con)
close(con)
head(delfi_html)
x[1]
x <- c("a", "b", "c", "d")
class(x[1])
tupeof(x[1])
typeof(x[1])
typeof(x[[1]])
str(x[[1]])
class(x[[1]])
## 1
if(<condition>) {
library(datasets)
ncol(airquality)
column_mean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <-mean(y[,i])
}
means
}
library(datasets)
column_mean(airquality)
numeric(nc)
numeric(ncol(airquality))
?numeric
column_mean <- function(y){
nc <- ncol(y)
means <- vector(mode="numeric", length=nc)
for (i in 1:nc){
means[i] <-mean(y[,i])
}
means
}
library(datasets)
column_mean(airquality)
column_mean <- function(y){
nc <- ncol(y)
means <- vector(mode="numeric", length=nc)
for (i in 1:nc){
means[i] <-mean(y[,i])
}
means
}
library(datasets)
column_mean(airquality)
column_mean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <-mean(y[,i], na.rm = TRUE )
}
print(means)
}
column_mean(airquality)
lm(data=mydata, y~x, model = FALSE, 1:100)
mydata <- data.frame(x=rnorm(1000), y=rnorm(1000))
lm(data=mydata, y~x, model = FALSE, 1:100)
lm(y~x, data=mydata, 1:100, model = FALSE)
lm(y~x, dat=mydata, 1:100, mod = FALSE)
lm (formula= "y~x", data=mydata, subset=1:100,model = FALSE)
plot(lm(formula= "y~x", data=mydata, subset=1:100,model = FALSE))
f<-function(a,b){
a^2
}
f(2) # positional matching a=2
f <- function(a,b){
print(a)
print(b)
}
f(10)  #positional matching a=10
f<-function(a,b){
a^2
}
f(2) # positional matching a=2
f <- function(a,b){
print(a)
print(b)
}
f(10)  #positional matching a=10
f<-function(a,b){
a^2
}
f(2) # positional matching a=2
f <- function(a,b){
print(a)
print(b)
}
f(10)  #positional matching a=10
x <- as.Date("2019-03-27")
class(x)
y <- strptime("2019 January 21, 21:15", format="%Y %B %d, %H:%M")
x-y
x <- as.Date("2019-03-27")
class(x)
y <- strptime("2019 January 21, 21:15", format="%Y %B %d, %H:%M")
y
x-y
as.POSIXct(x)-y
as.POSIXlt(x)-y
x <- as.Date("2019-03-27")
class(x)
y <- strptime("2019 January 21, 21:15", format="%Y %B %d, %H:%M")
class(y)
myplot <- function(x,y,type="l",...){
plot(x,y,type=type,...)
}
par(mfrow=c(1,2))
plot(mydata$x, mydata$y)
myplot(mydata$x, mydata$y)
myplot <- function(x,y,type="l",...){
plot(x,y,type=type,...)
}
par(mfrow=c(1,2))
plot(mydata$x, mydata$y)
myplot(mydata$x, mydata$y)
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE)
library(kableExtra)
con <- file("./duomenys_paskaitoms/ping-data.txt", "r")
df <- read.table(con,
sep=" ",
skip = 2,
nrows = 500,
stringsAsFactors = FALSE,
comment.char = "",
header = FALSE)
close(con)
con <- file("./duomenys_paskaitoms/ping-data.txt", "r")
con
df <- read.table(con,
sep=" ",
skip = 2,
nrows = 500,
stringsAsFactors = FALSE,
comment.char = "",
header = FALSE)
con
close(con)
con <- file("./duomenys_paskaitoms/ping-data.txt", "r")
df <- read.table(con,
sep=" ",
skip = 2,
nrows = 500,
stringsAsFactors = FALSE,
comment.char = "",
header = FALSE)
df <- read.table(con,
sep=" ",
skip = 2,
nrows = 500,
stringsAsFactors = FALSE,
comment.char = "",
header = FALSE)
head(readLines("http://delfi.lt"),30)
con <- file("./duomenys_paskaitoms/ping-data.txt", "r")
df <- read.table(con,
sep=" ",
skip = 2,
nrows = 500,
stringsAsFactors = FALSE,
comment.char = "",
header = FALSE)
close(con)
df <- read.table("./duomenys_paskaitoms/ping-data.txt",
sep=" ",
skip = 2,
nrows = 500,
stringsAsFactors = FALSE,
comment.char = "",
header = FALSE)
con <- gzfile("./duomenys_paskaitoms/census-income.data.gz")
# https://archive.ics.uci.edu/ml/datasets/Census-Income+%28KDD%29
census_data <- read.table(con,
sep=",",
nrows = 100,
stringsAsFactors = FALSE,
comment.char = "",
header = FALSE)
con <- gzfile("./duomenys_paskaitoms/census-income.data.gz")
# https://archive.ics.uci.edu/ml/datasets/Census-Income+%28KDD%29
census_data <- read.table(con,
sep=",",
nrows = 100,
stringsAsFactors = FALSE,
comment.char = "",
header = FALSE)
con <- url("http://www.delfi.lt")
delfi_html <- readLines(con)
close(con)
# atitinka:
readLines("http://delfi.lt")
con <- url("http://www.delfi.lt")
delfi_html <- readLines(con)
close(con)
# atitinka:
readLines("http://delfi.lt")
count <-0
while(count<5000){
print(count)
count <-count+1
}
count <-0
while(count<5){
print(count)
count <-count+1
}
myplot <- function(x,y,type="l",...){
plot(x,y,type=type,...)
}
par(mfrow=c(1,2))
plot(mydata$x, mydata$y)
mydata <- data.frame(x=rnorm(200), y=rnorm(200))
myplot <- function(x,y,type="l",...){
plot(x,y,type=type,...)
}
par(mfrow=c(1,2))
plot(mydata$x, mydata$y)
myplot(mydata$x, mydata$y)
knitr::opts_chunk$set(echo = TRUE)
kauliukas <- 1:6
kauliukas
kauliukas <- 1:6
kauliukas
ls()
round(pi)
args(sample)
sample(kauliukas, size=7)
sample(kauliukas, size=6)
sample(kauliukas, size = 6, replace = TRUE)
metimas <- sample(kauliukas, size=2, replace = TRUE)
sum(metimas)
metimas
sum(metimas)
metimas <- function(){
kauliukas <- 1:6
kauliukai <- sample(kauliukas, size=2, replace = TRUE)
sum(metimas)
}
metimas()
metimas <- function(){
kauliukas <- 1:6
kauliukai <- sample(kauliukas, size=2, replace = TRUE)
sum(kauliukai)
}
metimas()
metimas()
metimas()
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, error = TRUE)
metimas <- function(kaulas){
kauliukas <- 1:6
kauliukai <- sample(kaulas, size=2, replace = TRUE)
sum(kauliukai) #svarbu iššaukti rezultatą
}
# dabar funkcija veiks, jeigu bus įvestas argumentas "kaulas"
metimas(kaulas=1:100)
metimas <- function(kaulas){
kauliukas <- 1:6
kauliukai <- sample(kaulas, size=2, replace = TRUE)
sum(kauliukai) #svarbu iššaukti rezultatą
}
# dabar funkcija veiks, jeigu bus įvestas argumentas "kaulas"
metimas(kaulas=1:4)
metimas(kaulas=1:10)
metimas(kaulas=100:200)
x <- c(1,2,2,2,2,3,3)
hist(x)
?hist
hist(x, breaks = c(0:5))
hist(x)
hist(x, breaks = c(0:5))
hist(x, include.lowest = T)
x <- rnorm(n = 100, mean = 100, sd = 1)
hist(x)
hist(x, breaks = 0:200)
hist(x, breaks =10)
hist(x, breaks =20)
hist(x, breaks =seq(from=min(x), to=max(x), by=1))
x <- rnorm(n = 100, mean = 100, sd = 1)
hist(x, breaks =seq(from=min(x), to=max(x), by=1))
seq(from=min(x), to=max(x), by=1)
hist(x, breaks =seq(from=round(min(x)), to=round(max(x)), by=1))
summary(x)
hist(x, breaks =seq(from=round(min(x))-1, to=round(max(x))+1, by=1))
>round
?round]
?round
hist(x, breaks =seq(from=floor(min(x)), to=ceiling(max(x)), by=1))
x <- rnorm(n = 100, mean = 100, sd = 10)
x <- rnorm(n = 100, mean = 100, sd = 10)
hist(x, breaks =seq(from=floor(min(x)), to=ceiling(max(x)), by=1))
args(replicate)
replicate(3, 1+1)
replicate(10, metimas())
metimas <- function(){
kauliukas <- 1:6
kauliukai <- sample(kauliukas, size=2, replace = TRUE)
sum(kauliukai) #svarbu iššaukti rezultatą
}
metimas()
metimas()
metimas()
args(replicate)
replicate(3, 1+1)
replicate(10, metimas())
args(replicate)
# pvz pakarotja 3 kartus komanda 1+1
replicate(3, 1+1)
#pakartojame 10 kartų metimas() funkciją
replicate(10, metimas())
mean(1:6)
skirstinys <- replicate(10000, metimas())
hist(skirstinys)
hist(skirstinys, breaks = 0:12)
hist(skirstinys, breaks = seq(0:12, b=1))
skirstinys <- replicate(10000, metimas())
hist(skirstinys, breaks = seq(0:12, b=1))
skirstinys <- replicate(10000, metimas())
hist(skirstinys, breaks = seq(from=0, to=12, b=1))
skirstinys <- replicate(100000, metimas())
skirstinys <- replicate(100000, metimas())
hist(skirstinys, breaks = seq(from=0, to=12, b=1))
rep(1/8,3)
?rep
metimas <- function(){
kauliukas <- 1:6
kauliukai <- sample(kauliukas, size=2, replace = TRUE, prob = c(rep(1/8,5), 3/8))
#prob = c(rep(1/8,1/8,1/8,1/8,1/8, 3/8))
sum(kauliukai) #svarbu iššaukti rezultatą
}
metimas <- function(){
kauliukas <- 1:6
kauliukai <- sample(kauliukas, size=2, replace = TRUE, prob = c(rep(1/8,5), 3/8))
#prob = c(rep(1/8,1/8,1/8,1/8,1/8, 3/8))
sum(kauliukai) #svarbu iššaukti rezultatą
}
skirstinys <- replicate(10000, metimas())
hist(skirstinys, breaks = seq(from=0, to=12, b=1))
mean(skirstinys)
for(i in 1:4){
metimas()
}
for(i in 1:4){
i
metimas()
}
for(i in 1:4){
if(i<=4)
metimas()
}
lapply(1:4, metimas())
lapply(4, metimas())
lapply(1:4, metimas())
metimas()
lapply(1:4, metimas(.))
lapply(1:4, FUN=metimas())
sapply(1:4, metimas())
sapply(1:4, metimas)
?replicate()
sapply(4, metimas)
sapply(4, metimas())
sapply(4, metimas())
sapply(4, function(x) metimas())
sapply(4, function(x) metimas())
sapply(4, function(x) metimas())
sapply(4, function(x) metimas())
sapply(1:4, function(x) metimas())
sapply(1:4,  metimas())
sapply(1:4,  FUN metimas())
sapply(1:4,  FUN=metimas())
lapply(1:4,  metimas())
lapply(4,  metimas())
lapply(4,  function(x) metimas())
lapply(1:4,  function(x) metimas())
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, error = TRUE, cache = TRUE)
library(gridExtra)
x <- c(1,2,2,2,2,3,3)
grid.arrange(
hist(x),
hist(x, breaks = c(0:5))
)
x <- c(1,2,2,2,2,3,3)
grid.arrange(hist(x),hist(x, breaks = c(0:5)))
x <- c(1,2,2,2,2,3,3)
gridExtra::grid.arrange(hist(x), hist(x, breaks = c(0:5)))
?grid.arrange
x <- c(1,2,2,2,2,3,3)
par(hist(x), hist(x, breaks = c(0:5)),ncol = 2)
x <- c(1,2,2,2,2,3,3)
grid.arrange(hist(x), hist(x, breaks = c(0:5)),ncol = 2)
x <- c(1,2,2,2,2,3,3)
plot <- hist(x)
plot2 <- hist(x, breaks = c(0:5))
grid.arrange(plot1, plot2, ncol = 2)
search()
x <- c(1,2,2,2,2,3,3)
plot <- hist(x)
plot2 <- hist(x, breaks = c(0:5))
grid.arrange(plot1, plot2, ncol = 2)
x <- c(1,2,2,2,2,3,3)
plot1 <- hist(x)
plot2 <- hist(x, breaks = c(0:5))
grid.arrange(plot1, plot2, ncol = 2)
x <- c(1,2,2,2,2,3,3)
par(mfrow = c(2, 1))
plot1 <- hist(x)
plot2 <- hist(x, breaks = c(0:5))
x <- c(1,2,2,2,2,3,3)
par(mfrow=c(1,2))
hist(x)
hist(x, breaks = c(0:5))
x <- c(1,2,2,2,2,3,3)
par(mfrow=c(1,2))
hist(x)
hist(x, breaks = c(0:5))
x <- c(1,2,2,2,2,3,3)
par(mfrow=c(1,2))
hist(x)
hist(x, breaks = c(0:5))
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, error = TRUE, cache = TRUE, fig.pos = 'h')
library(gridExtra)
# All defaults
include_graphics("./figures/211px-6sided_dice.jpg")
# All defaults
include_graphics(./figures/211px-6sided_dice.jpg)
# All defaults
include_graphics(/figures/211px-6sided_dice.jpg)
# All defaults
include_graphics(figures/211px-6sided_dice.jpg)
