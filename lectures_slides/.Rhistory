metai=rep(2012:2017, times=5),
bvp=rep(runif(5,100,200),3)
)
x
split(x, c(x$regionas, x$metai))
x
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=5 ),
metai=rep(2012:2017, times=3),
bvp=rep(runif(5,100,200),3)
)
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=5 ),
metai=rep(2012:2017, times=3),
bvp=rep(runif(5,100,200),3)
)
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=5 ),
metai=rep(2013:2017, times=3),
bvp=rep(runif(5,100,200),3)
)
x
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
metai=rep(2013:2017, times=3),
bvp=rep(runif(5,100,200),3)
)
x
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
metai=rep(2013:2017)
bvp=rep(runif(5,100,200),3)
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
metai=rep(2013:2017),
bvp=rep(runif(5,100,200),3)
)
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
metai=rep(2013:2017),
lytis=c("M", "V"),
bvp=rep(runif(5,100,200),3)
)
x
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
lytis=c("M", "V"),
metai=rep(2013:2017),
bvp=rep(runif(5,100,200),3)
)
x
x <- data.frame(metai=rep(2013:2017),
regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
lytis=c("M", "V"),
bvp=rep(runif(5,100,200),3)
)
x
regionas <- as.factor(rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ))
lytis <- as.factor(c("M", "V"))
interaction(regionas, lytis)
interaction(regionas, lytis, drop = TRUE)
split(x, list(regionas, lytis))
split(x, list(regionas, lytis))
str(split(x, list(regionas, lytis)))
s <- (split(x, list(regionas, lytis)))
s
sapply(s, function(x) colMeans(x[,"bvp"], na.rm=TRUE))
sapply(s, function(x) colMeans(x[,"bvp"], na.rm=TRUE))
lapply(s, function(x) colMeans(x[,"bvp"], na.rm=TRUE))
sapply(s, function(x) colMeans(x))
str(s)
sapply(s, function(x) colMeans(x$bvp))
sapply(s, function(x) colMeans(x[,4]))
sapply(s, function(x) colMeans(x[,5]))
sapply(s, function(x) colMeans(x[,3]))
s
View(airquality)
s <- split(airquality, airquality$Month)
s
regionas <- as.factor(rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ))
lytis <- as.factor(c("M", "V"))
x <- data.frame(metai=rep(2013:2017),
regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
lytis=c("M", "V"),
bvp=rep(runif(5,100,200),3)
)
s <- (split(x, list(regionas, lytis)))
lapply(s, function(x) colMeans(x[,4], na.rm=TRUE))
s
class(s)
colMeans(s)
colMeans(s[,4])
lapply(s, function(x) colMeans(x))
s <- (split(x, c(x$regionas, x$lytis)))
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x[,4]))
sapply(s, function(x) colMeans(x[,4]))
s
s <- (split(x, list(regionas, lytis)))
s
lapply(s, function(x) colMeans(x[,4]))
lapply(s, function(x) mean(x[,4]))
x <- data.frame(metai=rep(2013:2017),
regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
lytis=c("M", "V"),
bvp=rep(runif(5,100,200),3),
vartojimas=rnorm(30)
)
x
s <- (split(x, list(regionas, lytis)))
lapply(s, function(x) mean(x[,4]))
lapply(s, function(x) colMeans(x[,4]))
lapply(s, function(x) colMeans(x[,4:5]))
sapply(s, function(x) colMeans(x[,4:5]))
sapply(s, function(x) mean(x[,4]))
sapply(s, function(x) colMeans(x[,4:5]))
sapply(s, function(x) mean(x[,4:5]))
head(s,3)
sapply(s, function(x) mean(x[,4]))
sapply(s, function(x) colMeans(x[,4:5]))
debug(lm)
lm(y~x)
lm(y~x)
above <- function(x,y){
if
}
iris
colMeans(iris)
mean(iris$Sepal.Length[iris$Species=="virginica"])
round(mean(iris$Sepal.Length[iris$Species=="virginica"]))
tapply(iris, iris$Species, mean)
tapply(iris, Species, mean)
?tapply
tapply(iris, Species, mean)
factor_list <- as.factor(iris$Species)
tapply(iris, Species, mean)
tapply(iris, factor_list, mean)
tapply(iris, factor_list, mean[,1:3])
tapply(iris$Sepal.Length, factor_list, mean[,1:3])
tapply(iris$Sepal.Length, factor_list, mean)
tapply(iris$Sepal.Length, factor_list, round(mean))
tapply(iris$Sepal.Length, factor_list, mean, round)
tapply(iris$Sepal.Length, factor_list, mean)
apply(iris, 2, mean)
apply(iris, 2, mean[,2])
apply(iris, 2, mean)
s <- split(iris,factor_list)
s
sapply(s, mean)
sapply(s, mean[,2])
sapply(s, colMeans)
sapply(s, function(x) colMeans)
sapply(s, function(x) mean)
sapply(s, function(x) mean(x))
sapply(s, function(x) mean(x[,3]))
sapply(s, function(x) mean(x[,2]))
sapply(s, function(x) mean(x[,1]))
sapply(s, function(x) colMeans(x))
sapply(s, function(x) colMeans(x[,1:4]))
apply(iris[,1:4], 2, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
?with
swirl
install.packages("swirl")
library(swirl)
swirl()
bye()
a
?distribution
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE)
library(kableExtra)
args(norm)
args(dnorm)
plot(rpois(100,2))
plot(rpois(1000,2))
plot(rpois(1000,20))
hist(rpois(1000,20))
hist(rpois(1000,2))
hist(rpois(100,2))
hist(rpois(50,3))
hist(rpois(100,3))
rpois(n=10, labda=1)
hist(rpois(n=10, lambda=2))
rpois(n=10, lambda = 1)
rpois(n=10, lambda=2)
hist(rpois(n=50, lambda=2))
rpois(n=10, lambda = 1)
rpois(n=10, lambda=2)
hist(rpois(n=100, lambda=2))
rpois(n=10, lambda = 1)
rpois(n=10, lambda=2)
hist(rpois(n=1000, lambda=2))
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
plot(x, pbinom(x, 100, 0.01), type = "s", ylab = "F(x)",
main = "Binomial(100, 0.01) CDF")
ppois(q=80, lambda = 50, lower.tail = FALSE)
ppois(q=80, lambda = 50, lower.tail = TRUE)
ppois(q=60, lambda = 50, lower.tail = FALSE)
ppois(q=60, lambda = 50, lower.tail = TRUE)
ppois(q=70, lambda = 50, lower.tail = TRUE)
ppois(q=70, lambda = 50, lower.tail = TRUE)
ppois(q=70, lambda = 50, lower.tail = FALSE)
ppois(q=75, lambda = 50, lower.tail = FALSE)
ppois(q=65, lambda = 50, lower.tail = FALSE)
qpois(0.01, lambda = 50)
qpois(0.01, lambda = 50, lower.tail = TRUE)
qpois(0.01, lambda = 50, lower.tail = FALSE)
qpois(p=0.01, lambda = 50, lower.tail = FALSE)
qpois(p=0.009, lambda = 50, lower.tail = FALSE)
qpois(p=0.008, lambda = 50, lower.tail = FALSE)
qpois(p=0.01, lambda = 50, lower.tail = FALSE)
ppois(q=67, lambda = 50, lower.tail = FALSE)
sample(10)
sample(10, replace = TRUE)
?binom
?dbinom
dbinom(x=4, size = 10, prob = 0.25)
## todėl norint žinoti tikimybę jog studentas atsakys į 4 arba mažiau
dbinom(x=0, size = 10, prob = 0.25)+dbinom(x=1, size = 10, prob = 0.25)+
dbinom(x=2, size = 10, prob = 0.25)+dbinom(x=3, size = 10, prob = 0.25)+
dbinom(x=4, size = 10, prob = 0.25)
# alternatyviai galima pasinaudoti pbinom()
pbinom(q=4, size= 10, prob = 0.25, lower.tail = TRUE)
pbinom(q=4, size= 10, prob = 0.25, lower.tail = FALSE)
# alternatyviai galima pasinaudoti pbinom()
pbinom(q=5, size= 10, prob = 0.25, lower.tail = TRUE)
# tačiau piktąjį dėstytoją domina, kokia tikimybė, jog studentas neišlaikys:
pbinom(q=4, size= 10, prob = 0.25, lower.tail = FALSE)
# tikimybė jog studentas atsakys lygiai 4 teisingai
dbinom(x=4, size = 10, prob = 0.25)
## todėl norint žinoti tikimybę jog studentas atsakys į 4 arba mažiau
dbinom(x=0, size = 10, prob = 0.25)+dbinom(x=1, size = 10, prob = 0.25)+
dbinom(x=2, size = 10, prob = 0.25)+dbinom(x=3, size = 10, prob = 0.25)+
dbinom(x=4, size = 10, prob = 0.25)
# alternatyviai galima pasinaudoti pbinom()
pbinom(q=4, size= 10, prob = 0.25, lower.tail = TRUE)
# tačiau piktąjį dėstytoją domina, kokia tikimybė, jog studentas "praslys:
pbinom(q=4, size= 10, prob = 0.25, lower.tail = FALSE)
sapply(q=0:10, pbinom(size= 10, prob = 0.25, lower.tail = FALSE))
x <- seq(from=0, to=10, by=1)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y)
?plot
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "l")
density(x,y)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "l")
plot(x,y, type = "p")
plot(x,y, type = "p", xlim = c(0,10))
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "p", xlim = c(0,10))
axis.break(axis=1)
plot(x,y, type = "p", xlim = 1:10)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "p", xlim = seq(1,10, by=1))
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
# tikimybė jog studentas atsakys lygiai 4 teisingai
dbinom(x=4, size = 10, prob = 0.25)
## todėl norint žinoti tikimybę jog studentas atsakys į 4 arba mažiau
dbinom(x=0, size = 10, prob = 0.25)+dbinom(x=1, size = 10, prob = 0.25)+
dbinom(x=2, size = 10, prob = 0.25)+dbinom(x=3, size = 10, prob = 0.25)+
dbinom(x=4, size = 10, prob = 0.25)
# alternatyviai galima pasinaudoti pbinom()
pbinom(q=4, size= 10, prob = 0.25, lower.tail = TRUE)
# tačiau piktąjį dėstytoją domina, kokia tikimybė, jog studentas "praslys":
pbinom(q=4, size= 10, prob = 0.25, lower.tail = FALSE)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
qbinom(0.1, 10,0.25)
?binom
qbinom(0.25, 10,0.25)
qbinom(0.75, 10,0.25)
qbinom(0.9, 10,0.25)
qbinom(0.99, 10,0.25)
qbinom(0.1, 10,0.25, lower.tail = FALSE)
qbinom(0.05, 10, 0.25, lower.tail = FALSE)
qbinom(0.1, 6, 1/3, lower.tail = FALSE)
qbinom(0.1, 10, 1/3, lower.tail = FALSE)
qbinom(0.1, 10, 0.25, lower.tail = FALSE)
qbinom(0.1, 10, 0.25, lower.tail = FALSE)
x <- seq(from=0, to=10, by=1)
y <- pbinom(x, size=10, prob=0.25)
x <- seq(from=0, to=10, by=1)
y <- pbinom(x, size=10, prob=0.25)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
# tikimybė jog studentas atsakys lygiai 4 teisingai
dbinom(x=4, size = 10, prob = 0.25)
dpois(5,50) ## 5 Pr(x=5), lambda=50
dpois(30 ,2) ## 30  Pr(x=30), lambda=50
dppois(60,2) ## 60  Pr(x=50), lambda=50
dpois(5,50) ## 5 Pr(x=5), lambda=50
dpois(30 ,2) ## 30  Pr(x=30), lambda=50
dpois(60,2) ## 60  Pr(x=50), lambda=50
ppois(5,50) ## 5 arba mažiau skambučių Pr(x<=5), lambda=50
ppois(30 ,2) ## 30 arba mažiau skambučių Pr(x<=30), lambda=50
ppois(60,2) ## 60 arba mažiau skambučių Pr(x<=50),lambda=50
ppois(5,50) ## 5 arba mažiau skambučių Pr(x<=5), lambda=50
ppois(30 ,2) ## 30 arba mažiau skambučių Pr(x<=30), lambda=50
ppois(60,2) ## 60 arba mažiau skambučių Pr(x<=50),lambda=50
ppois(5,50) ## 5 arba mažiau skambučių Pr(x<=5), lambda=50
ppois(30 ,50) ## 30 arba mažiau skambučių Pr(x<=30), lambda=50
ppois(60, 50) ## 60 arba mažiau skambučių Pr(x<=50),lambda=50
ppois(30 ,50) ## 30 arba mažiau skambučių Pr(x<=30), lambda=50
dpois(5, 50) ## 5 Pr(x=5), lambda=50
dpois(30 , 50) ## 30  Pr(x=30), lambda=50
dpois(60, 50) ## 60  Pr(x=50), lambda=50
ppois(5, 50) ## 5 arba mažiau skambučių Pr(x<=5), lambda=50
ppois(30, 50) ## 30 arba mažiau skambučių Pr(x<=30), lambda=50
ppois(60, 50) ## 60 arba mažiau skambučių Pr(x<=50),lambda=50
qpois(p=0.01, lambda = 50, lower.tail = FALSE) - 50
# Kiek papildomų skambučių reiktų papildomai galėti priimti?
qpois(p=0.01, lambda = 50, lower.tail = FALSE)
(qpois(p=0.01, lambda = 50, lower.tail = FALSE) - 50) / 5
ceiling((qpois(p=0.01, lambda = 50, lower.tail = FALSE) - 50) / 5)
?tapply
tapply(airquality, airquality$Month, mean)
tapply(airquality, airquality$Month, colMeans)
tapply(airquality, airquality$Month, colMeans(x[,1:4]))
tapply(airquality, airquality$Month, colMeans([,1:4]))
tapply(airquality, airquality$Month, colMeans(.[,1:4]))
tapply(airquality, airquality$Month, function(x), colMeans(x[,1:4]))
tapply(airquality, airquality$Month, function(x) colMeans(x[,1:4]))
split(rnorm(20), gl(2,10))
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE)
library(kableExtra)
x <- data.frame(metai=rep(2013:2017),
regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
lytis=c("M", "V"),
bvp=rep(runif(5,100,200),3),
vartojimas=rnorm(30)
)
s <- split(x, list(regionas, lytis))
regionas <- as.factor(rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ))
lytis <- as.factor(c("M", "V"))
x <- data.frame(metai=rep(2013:2017),
regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
lytis=c("M", "V"),
bvp=rep(runif(5,100,200),3),
vartojimas=rnorm(30)
)
s <- split(x, list(regionas, lytis))
head(x,15)
head(x,15)
head(s,2)
head(s,1)
s
# Kiek papildomų skambučių reiktų papildomai galėti priimti?
qpois(p=0.01, lambda = 50, lower.tail = FALSE)
# Kiek papildomų skambučių reiktų papildomai galėti priimti?
qpois(p=0.001, lambda = 50, lower.tail = FALSE)
ceiling(
(qpois(p=0.01, lambda = 50, lower.tail = FALSE) - 65) / 5
)
ceiling(
(qpois(p=0.001, lambda = 50, lower.tail = FALSE) - 65) / 5
)
# Kiek papildomų skambučių reiktų papildomai galėti priimti?
qpois(p=0.001, lambda = 50, lower.tail = FALSE)
65/3
65/5
dist <- runif(n=1000, min=0, max=1)
hist(dist)
dist <- runif(n=1000, min=0, max=1)
hist(dist, freq = TRUE)
dist <- runif(n=1000, min=0, max=1)
hist(dist, freq = FALSE)
dist <- runif(n=1000, min=0, max=1)
hist(dist, freq = TRUE)
hist(dist, freq = FALSE)
hist(dist, probability =  TRUE)
dist <- runif(n=1000, min=0, max=1)
hist(dist, probability =  TRUE, breaks = seq(from=0, to=1, by=0.1))
hist(dist, probability =  FALSE, breaks = seq(from=0, to=1, by=0.1))
hist(dist/1000, probability =  FALSE, breaks = seq(from=0, to=1, by=0.1))
h <- hist(dist, probability =  FALSE, breaks = seq(from=0, to=1, by=0.1))
h
hist(dist/1000, probability =  TRUE, breaks = seq(from=0, to=1, by=0.1))
h <- hist(dist/1000, probability =  TRUE, breaks = seq(from=0, to=1, by=0.1))
h
h <- hist(dist, probability =  TRUE, breaks = seq(from=0, to=1, by=0.1))
h
h <- hist(dist, probability =  F, breaks = seq(from=0, to=1, by=0.1))
h
dist <- runif(n=1000, min=0, max=1)
hist(dist)
dist <- runif(n=1000, min=0, max=1)
hist(dist)
hist(dist, breaks = seq(from-4, to=4, by=1))
hist(dist, breaks = seq(from=-4, to=4, by=1))
hist(dist, breaks = seq(from=-4, to=4, by=0.5))
dist <- runif(n=1000, min=2, max=5)
hist(dist, breaks = seq(from=0, to=6, by=1))
sample(1:10,3)
sample(1:10,3)
sample(1:10,3)
sample(1:10,3)
runif(100, 0,0.1)
runif(100, 0,1)
runif(100, 0,10)
hist(runif(100, 0,10))
hist(runif(10000, 0,10))
hist(runif(100000, 0,10))
hist(runif(1000000, 0,10))
hist(runif(10000000, 0,10))
hist(runif(100000000, 0,10))
pexp(2, rate=1/3)
x <- seq(from=0, to=10, by=1)
y <- pexp(x, rate=1/3 )
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
y <- dexp(x, rate=1/3 )
x <- seq(from=0, to=10, by=1)
y <- dexp(x, rate=1/3 )
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=0, to=10, by=1)
y <- pexp(x, rate=1/3 )
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
pexp(2, rate=1/3)
pexp(3, rate=1/3)
pexp(3, rate=1/3, lower.tail = TRUE)
dexp(2, rate=1/3)
dexp(1, rate=1/3)
pexp(2, rate=1/3)
dexp(1, rate=1/3)
pexp(2, rate=1/3)
pexp(2, rate=1/3)
dexp(2, rate=1/3)
dexp(1, rate=1/3)
dexp(2, rate=1/3)
x <- seq(from=0, to=10, by=1)
y <- dexp(x, rate=1/3 )
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
pexp(2, rate=1/3)
dexp(1, rate=1/3)
dexp(2, rate=1/3)
pexp(2, rate=1/3)
dexp(0, rate=1/3)
dexp(1, rate=1/3)
dexp(2, rate=1/3)
0.23+0.17
x <- seq(from=-10, to=10, by=1)
y <- dnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=-10, to=10, by=1)
y <- dnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=-10, to=10, by=10)
y <- dnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=-10, to=10, by=0.1)
y <- dnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=-10, to=10, by=0.2)
y <- dnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=-5, to=5, by=0.2)
y <- dnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=-5, to=5, by=0.2)
y <- pnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=-5, to=5, by=0.5)
y <- pnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=-5, to=5, by=0.5)
x
x <- seq(from=-5, to=5, by=0.2)
y <- dnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = F)
x <- seq(from=-5, to=5, by=0.5)
y <- pnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = F)
x <- seq(from=-5, to=5, by=0.2)
y <- pnorm(x)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = F)
pnorm(.5)
qnorm(.5)
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, error = FALSE)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data"
census <- read.table(url)
View(census)
census <- read.csv(url)
View(census)
census1 <- read.table(url)
census1 <- read.table(url)
View(census)
census2 <- read.csv(url)
View(census1)
View(census2)
