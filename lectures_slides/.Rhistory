cr <- corr("specdata")
summary(cr)
length(cr)
corr <- function(direktorija, threshold=0){
ls_files <- list.files(direktorija, full.names = TRUE)
ax <- numeric(length=length(ls_files))
for(i in 1:length(ls_files)){
ax[i] <- sum(complete.cases(read.csv(ls_files[i],header = TRUE)))
}
bx <- seq_along(ls_files)[ax>threshold]
cx <- numeric(length = length(bx))
j <- 1
for (i in bx) {
temp <- read.csv(ls_files[i],header = TRUE)
temp <- na.omit(temp)
cx[j] <- cor(temp[,2], temp[,3])
j <- j+1
}
cx
}
cr <- corr("specdata")
summary(cr)
length(cr)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE)
complete <- function(direktorija, id=1:332){
df <- data.frame(id=NA, nobs=NA)
j <- 1
for (i in id) {
failas <- list.files(direktorija, full.names = TRUE)[i]
df[j,1] <-i
df[j,2] <- sum(complete.cases(read.csv(failas,header = TRUE)))
j <- j+1
}
print(df)
}
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE)
library(kableExtra)
args(lapply)
args(lapply)
lapply
x <-  list(a=1:10, b=rnorm(10), c=seq(from=100, to=200, by=2))
x
lapply(x, mean)
lapply(1:10,mean)
lapply(c(1:10),mean)
lapply(c(1:10),mean)
x <- 1:5
lapply(x, runif)
as.list(1:5)
runif(10)
lapply(x, runif, min=5, max=10)
x <- list(a=matrix(1:9, nrow=3, ncol = 2), b=matrix(1:4, nrow = 2, ncol=2))
x <- list(a=matrix(1:9, nrow=3, ncol = 3), b=matrix(1:4, nrow = 2, ncol=2))
x <- list(a=matrix(1:9, nrow=3, ncol = 3), b=matrix(1:4, nrow = 2, ncol=2))
lapply(x, function(elt) elt[,1]) #elt yra anoniminė funkcija
x <- list(a=matrix(1:9, nrow=3, ncol = 3), b=matrix(1:4, nrow = 2, ncol=2))
lapply(x, function(elt) elt[,1, drop=FALSE]) #elt yra anoniminė funkcija
str(apply)
args(apply)
x <- matrix(rnorm(200,20,10))
apply(x, 2, mean)
apply(x, 1, mean)
x <- matrix(rnorm(200,20,10))
apply(x, 2, mean)
x <- matrix(rnorm(200),20,10)
apply(x, 2, mean)
apply(x, 1, mean)
x <- matrix(1:4,2,2)
apply(x, 1, mean)
apply(x, 2, mean)
apply(x, 1, sum)
x <- matrix(1:4,2,2)
x
apply(x, 1, mean)
apply(x, 2, mean)
apply(x, 1, sum)
apply(x, 2, sum)
x <- matrix(rnorm(200),20,10)
apply(x, 1, quantile, probs=c(0.25 ,0.5, 0.75))
x <- array(data=rnorm(40), dim = c(2,2,10))
x
apply(x, c(1,2), mean)
list(rep(1,4), rep(2,3), rep(3,2, rep(4,1)))
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1)))
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
noise(5,1,2)
noise(1:5,1,2)
noise(5,1,2)
noise(1:5,1,2)
rnorm(1:5)
noise(1:5,1:5,2)
noise(1:5,1:5,1)
noise(1:5,1:5,2)
?rnorm
noise(1:5,1:5,0.01)
mappply(noise, 1:5, 1:5,0.1)
noise <- function(n, mean, sd){
rnorm(n, mean, sd)
}
mappply(noise, 1:5, 1:5, 0.1)
mapply(noise, 1:5, 1:5, 0.1)
?mapply
mapply(function(x, y) seq_len(x) + y,
c(a =  1, b = 2, c = 3),  # names from first
c(A = 10, B = 0, C = -10))
word <- function(C, k) paste(rep.int(C, k), collapse = "")
word
utils::str(mapply(word, LETTERS[1:6], 6:1, SIMPLIFY = FALSE))
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3,10)
?gl
tapply(x, f, mean)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
# Generate factors by specifying the pattern of their levels.
#gl(n, k, length = n*k, labels = seq_len(n), ordered = FALSE)
f <- gl(3,10)
f
tapply(x, f, mean)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, mean, simplify = FALSE)
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
# Generate factors by specifying the pattern of their levels.
#gl(n, k, length = n*k, labels = seq_len(n), ordered = FALSE)
f <- gl(3,10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x, f, summary, simplify = FALSE)
tapply(x, f, summary, simplify = T)
tapply(x, f, summary, simplify = TRUE)
tapply(x, f, summary)
tapply(x, f, summary)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
split(x, f)
lapply(split(x, f),mean)
tapply(x, f, mean)
lapply(split(x, f),mean)
tapply(x, f, mean)
head(airquality)
split(airquality, month)
split(airquality, Month)
split(airquality, airquality$Month)
s <- split(airquality, airquality$Month)
laapply(s, function(x) colMeans(x[1:4,]))
lapply(s, function(x) colMeans(x[1:4,]))
library(tidyverse)
airquality %>%
group_by(Month) %>%
summarise(mean)
airquality %>%
group_by(Month) %>%
summarise_each(mean)
airquality %>%
group_by(Month) %>%
summarise_each(mean, na.rm=TRUE)
airquality %>%
group_by(Month) %>%
summarise_each(mean(., na.rm=TRUE))
airquality %>%
group_by(Month) %>%
summarise_each(mean)
lapply(s, function(x) colMeans(x[,1:4]))
lapply(s, function(x) colMeans(x[,1:4]), na.rm=TRUE)
lapply(s, function(x) colMeans(x[,1:4], na.rm=TRUE))
sapply(s, function(x) colMeans(x[,1:4], na.rm=TRUE))
rep("Vilnius", "Kaunas", "Klaidpėda", 5 )
rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=5 )
?rep
rep(2012:2017, times=5)
runif(5,100,200)
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=5 ),
metai=rep(2012:2017, times=5),
bvp=rep(runif(5,100,200),3)
)
x
split(x, c(x$regionas, x$metai))
x
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=5 ),
metai=rep(2012:2017, times=3),
bvp=rep(runif(5,100,200),3)
)
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=5 ),
metai=rep(2012:2017, times=3),
bvp=rep(runif(5,100,200),3)
)
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=5 ),
metai=rep(2013:2017, times=3),
bvp=rep(runif(5,100,200),3)
)
x
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
metai=rep(2013:2017, times=3),
bvp=rep(runif(5,100,200),3)
)
x
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
metai=rep(2013:2017)
bvp=rep(runif(5,100,200),3)
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
metai=rep(2013:2017),
bvp=rep(runif(5,100,200),3)
)
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
metai=rep(2013:2017),
lytis=c("M", "V"),
bvp=rep(runif(5,100,200),3)
)
x
x <- data.frame(regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
lytis=c("M", "V"),
metai=rep(2013:2017),
bvp=rep(runif(5,100,200),3)
)
x
x <- data.frame(metai=rep(2013:2017),
regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
lytis=c("M", "V"),
bvp=rep(runif(5,100,200),3)
)
x
regionas <- as.factor(rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ))
lytis <- as.factor(c("M", "V"))
interaction(regionas, lytis)
interaction(regionas, lytis, drop = TRUE)
split(x, list(regionas, lytis))
split(x, list(regionas, lytis))
str(split(x, list(regionas, lytis)))
s <- (split(x, list(regionas, lytis)))
s
sapply(s, function(x) colMeans(x[,"bvp"], na.rm=TRUE))
sapply(s, function(x) colMeans(x[,"bvp"], na.rm=TRUE))
lapply(s, function(x) colMeans(x[,"bvp"], na.rm=TRUE))
sapply(s, function(x) colMeans(x))
str(s)
sapply(s, function(x) colMeans(x$bvp))
sapply(s, function(x) colMeans(x[,4]))
sapply(s, function(x) colMeans(x[,5]))
sapply(s, function(x) colMeans(x[,3]))
s
View(airquality)
s <- split(airquality, airquality$Month)
s
regionas <- as.factor(rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ))
lytis <- as.factor(c("M", "V"))
x <- data.frame(metai=rep(2013:2017),
regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
lytis=c("M", "V"),
bvp=rep(runif(5,100,200),3)
)
s <- (split(x, list(regionas, lytis)))
lapply(s, function(x) colMeans(x[,4], na.rm=TRUE))
s
class(s)
colMeans(s)
colMeans(s[,4])
lapply(s, function(x) colMeans(x))
s <- (split(x, c(x$regionas, x$lytis)))
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x[,4]))
sapply(s, function(x) colMeans(x[,4]))
s
s <- (split(x, list(regionas, lytis)))
s
lapply(s, function(x) colMeans(x[,4]))
lapply(s, function(x) mean(x[,4]))
x <- data.frame(metai=rep(2013:2017),
regionas=rep(c("Vilnius", "Kaunas", "Klaidpėda"), each=10 ),
lytis=c("M", "V"),
bvp=rep(runif(5,100,200),3),
vartojimas=rnorm(30)
)
x
s <- (split(x, list(regionas, lytis)))
lapply(s, function(x) mean(x[,4]))
lapply(s, function(x) colMeans(x[,4]))
lapply(s, function(x) colMeans(x[,4:5]))
sapply(s, function(x) colMeans(x[,4:5]))
sapply(s, function(x) mean(x[,4]))
sapply(s, function(x) colMeans(x[,4:5]))
sapply(s, function(x) mean(x[,4:5]))
head(s,3)
sapply(s, function(x) mean(x[,4]))
sapply(s, function(x) colMeans(x[,4:5]))
debug(lm)
lm(y~x)
lm(y~x)
above <- function(x,y){
if
}
iris
colMeans(iris)
mean(iris$Sepal.Length[iris$Species=="virginica"])
round(mean(iris$Sepal.Length[iris$Species=="virginica"]))
tapply(iris, iris$Species, mean)
tapply(iris, Species, mean)
?tapply
tapply(iris, Species, mean)
factor_list <- as.factor(iris$Species)
tapply(iris, Species, mean)
tapply(iris, factor_list, mean)
tapply(iris, factor_list, mean[,1:3])
tapply(iris$Sepal.Length, factor_list, mean[,1:3])
tapply(iris$Sepal.Length, factor_list, mean)
tapply(iris$Sepal.Length, factor_list, round(mean))
tapply(iris$Sepal.Length, factor_list, mean, round)
tapply(iris$Sepal.Length, factor_list, mean)
apply(iris, 2, mean)
apply(iris, 2, mean[,2])
apply(iris, 2, mean)
s <- split(iris,factor_list)
s
sapply(s, mean)
sapply(s, mean[,2])
sapply(s, colMeans)
sapply(s, function(x) colMeans)
sapply(s, function(x) mean)
sapply(s, function(x) mean(x))
sapply(s, function(x) mean(x[,3]))
sapply(s, function(x) mean(x[,2]))
sapply(s, function(x) mean(x[,1]))
sapply(s, function(x) colMeans(x))
sapply(s, function(x) colMeans(x[,1:4]))
apply(iris[,1:4], 2, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
?with
swirl
install.packages("swirl")
library(swirl)
swirl()
bye()
a
?distribution
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE)
library(kableExtra)
args(norm)
args(dnorm)
plot(rpois(100,2))
plot(rpois(1000,2))
plot(rpois(1000,20))
hist(rpois(1000,20))
hist(rpois(1000,2))
hist(rpois(100,2))
hist(rpois(50,3))
hist(rpois(100,3))
rpois(n=10, labda=1)
hist(rpois(n=10, lambda=2))
rpois(n=10, lambda = 1)
rpois(n=10, lambda=2)
hist(rpois(n=50, lambda=2))
rpois(n=10, lambda = 1)
rpois(n=10, lambda=2)
hist(rpois(n=100, lambda=2))
rpois(n=10, lambda = 1)
rpois(n=10, lambda=2)
hist(rpois(n=1000, lambda=2))
x <- seq(-0.01, 5, 0.01)
plot(x, ppois(x, 1), type = "s", ylab = "F(x)", main = "Poisson(1) CDF")
plot(x, pbinom(x, 100, 0.01), type = "s", ylab = "F(x)",
main = "Binomial(100, 0.01) CDF")
ppois(q=80, lambda = 50, lower.tail = FALSE)
ppois(q=80, lambda = 50, lower.tail = TRUE)
ppois(q=60, lambda = 50, lower.tail = FALSE)
ppois(q=60, lambda = 50, lower.tail = TRUE)
ppois(q=70, lambda = 50, lower.tail = TRUE)
ppois(q=70, lambda = 50, lower.tail = TRUE)
ppois(q=70, lambda = 50, lower.tail = FALSE)
ppois(q=75, lambda = 50, lower.tail = FALSE)
ppois(q=65, lambda = 50, lower.tail = FALSE)
qpois(0.01, lambda = 50)
qpois(0.01, lambda = 50, lower.tail = TRUE)
qpois(0.01, lambda = 50, lower.tail = FALSE)
qpois(p=0.01, lambda = 50, lower.tail = FALSE)
qpois(p=0.009, lambda = 50, lower.tail = FALSE)
qpois(p=0.008, lambda = 50, lower.tail = FALSE)
qpois(p=0.01, lambda = 50, lower.tail = FALSE)
ppois(q=67, lambda = 50, lower.tail = FALSE)
sample(10)
sample(10, replace = TRUE)
?binom
?dbinom
dbinom(x=4, size = 10, prob = 0.25)
## todėl norint žinoti tikimybę jog studentas atsakys į 4 arba mažiau
dbinom(x=0, size = 10, prob = 0.25)+dbinom(x=1, size = 10, prob = 0.25)+
dbinom(x=2, size = 10, prob = 0.25)+dbinom(x=3, size = 10, prob = 0.25)+
dbinom(x=4, size = 10, prob = 0.25)
# alternatyviai galima pasinaudoti pbinom()
pbinom(q=4, size= 10, prob = 0.25, lower.tail = TRUE)
pbinom(q=4, size= 10, prob = 0.25, lower.tail = FALSE)
# alternatyviai galima pasinaudoti pbinom()
pbinom(q=5, size= 10, prob = 0.25, lower.tail = TRUE)
# tačiau piktąjį dėstytoją domina, kokia tikimybė, jog studentas neišlaikys:
pbinom(q=4, size= 10, prob = 0.25, lower.tail = FALSE)
# tikimybė jog studentas atsakys lygiai 4 teisingai
dbinom(x=4, size = 10, prob = 0.25)
## todėl norint žinoti tikimybę jog studentas atsakys į 4 arba mažiau
dbinom(x=0, size = 10, prob = 0.25)+dbinom(x=1, size = 10, prob = 0.25)+
dbinom(x=2, size = 10, prob = 0.25)+dbinom(x=3, size = 10, prob = 0.25)+
dbinom(x=4, size = 10, prob = 0.25)
# alternatyviai galima pasinaudoti pbinom()
pbinom(q=4, size= 10, prob = 0.25, lower.tail = TRUE)
# tačiau piktąjį dėstytoją domina, kokia tikimybė, jog studentas "praslys:
pbinom(q=4, size= 10, prob = 0.25, lower.tail = FALSE)
sapply(q=0:10, pbinom(size= 10, prob = 0.25, lower.tail = FALSE))
x <- seq(from=0, to=10, by=1)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y)
?plot
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "l")
density(x,y)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "l")
plot(x,y, type = "p")
plot(x,y, type = "p", xlim = c(0,10))
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "p", xlim = c(0,10))
axis.break(axis=1)
plot(x,y, type = "p", xlim = 1:10)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "p", xlim = seq(1,10, by=1))
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
# tikimybė jog studentas atsakys lygiai 4 teisingai
dbinom(x=4, size = 10, prob = 0.25)
## todėl norint žinoti tikimybę jog studentas atsakys į 4 arba mažiau
dbinom(x=0, size = 10, prob = 0.25)+dbinom(x=1, size = 10, prob = 0.25)+
dbinom(x=2, size = 10, prob = 0.25)+dbinom(x=3, size = 10, prob = 0.25)+
dbinom(x=4, size = 10, prob = 0.25)
# alternatyviai galima pasinaudoti pbinom()
pbinom(q=4, size= 10, prob = 0.25, lower.tail = TRUE)
# tačiau piktąjį dėstytoją domina, kokia tikimybė, jog studentas "praslys":
pbinom(q=4, size= 10, prob = 0.25, lower.tail = FALSE)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
qbinom(0.1, 10,0.25)
?binom
qbinom(0.25, 10,0.25)
qbinom(0.75, 10,0.25)
qbinom(0.9, 10,0.25)
qbinom(0.99, 10,0.25)
qbinom(0.1, 10,0.25, lower.tail = FALSE)
qbinom(0.05, 10, 0.25, lower.tail = FALSE)
qbinom(0.1, 6, 1/3, lower.tail = FALSE)
qbinom(0.1, 10, 1/3, lower.tail = FALSE)
qbinom(0.1, 10, 0.25, lower.tail = FALSE)
qbinom(0.1, 10, 0.25, lower.tail = FALSE)
x <- seq(from=0, to=10, by=1)
y <- pbinom(x, size=10, prob=0.25)
x <- seq(from=0, to=10, by=1)
y <- pbinom(x, size=10, prob=0.25)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y, type = "p")
axis(side = 1, at = x,labels = T)
# tikimybė jog studentas atsakys lygiai 4 teisingai
dbinom(x=4, size = 10, prob = 0.25)
dpois(5,50) ## 5 Pr(x=5), lambda=50
dpois(30 ,2) ## 30  Pr(x=30), lambda=50
dppois(60,2) ## 60  Pr(x=50), lambda=50
dpois(5,50) ## 5 Pr(x=5), lambda=50
dpois(30 ,2) ## 30  Pr(x=30), lambda=50
dpois(60,2) ## 60  Pr(x=50), lambda=50
ppois(5,50) ## 5 arba mažiau skambučių Pr(x<=5), lambda=50
ppois(30 ,2) ## 30 arba mažiau skambučių Pr(x<=30), lambda=50
ppois(60,2) ## 60 arba mažiau skambučių Pr(x<=50),lambda=50
ppois(5,50) ## 5 arba mažiau skambučių Pr(x<=5), lambda=50
ppois(30 ,2) ## 30 arba mažiau skambučių Pr(x<=30), lambda=50
ppois(60,2) ## 60 arba mažiau skambučių Pr(x<=50),lambda=50
ppois(5,50) ## 5 arba mažiau skambučių Pr(x<=5), lambda=50
ppois(30 ,50) ## 30 arba mažiau skambučių Pr(x<=30), lambda=50
ppois(60, 50) ## 60 arba mažiau skambučių Pr(x<=50),lambda=50
ppois(30 ,50) ## 30 arba mažiau skambučių Pr(x<=30), lambda=50
dpois(5, 50) ## 5 Pr(x=5), lambda=50
dpois(30 , 50) ## 30  Pr(x=30), lambda=50
dpois(60, 50) ## 60  Pr(x=50), lambda=50
ppois(5, 50) ## 5 arba mažiau skambučių Pr(x<=5), lambda=50
ppois(30, 50) ## 30 arba mažiau skambučių Pr(x<=30), lambda=50
ppois(60, 50) ## 60 arba mažiau skambučių Pr(x<=50),lambda=50
qpois(p=0.01, lambda = 50, lower.tail = FALSE) - 50
# Kiek papildomų skambučių reiktų papildomai galėti priimti?
qpois(p=0.01, lambda = 50, lower.tail = FALSE)
(qpois(p=0.01, lambda = 50, lower.tail = FALSE) - 50) / 5
ceiling((qpois(p=0.01, lambda = 50, lower.tail = FALSE) - 50) / 5)
